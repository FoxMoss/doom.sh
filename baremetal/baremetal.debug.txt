
baremetal.elf:     file format elf32-littleriscv

SYMBOL TABLE:
80000000 l    d  .text	00000000 .text
80000150 l    d  .data	00000000 .data
800001c0 l    d  .heap	00000000 .heap
800011c0 l    d  .stack	00000000 .stack
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    df *ABS*	00000000 baremetal.c
80000014 l     F .text	00000008 lprint
8000001c l     F .text	0000004c printFib.part.0
800001c0 g       .heap	00000000 _sheap
00001000 g       *ABS*	00000000 __stack_size
800001c0 g       .data	00000000 __BSS_BEGIN__
00001000 g       *ABS*	00000000 __heap_size
80000000 g       .text	00000000 _start
800001b9 g       .data	00000000 __DATA_END__
1100bff8 g       *ABS*	00000000 TIMERL
800001c0 g       .data	00000000 __BSS_END__
80000068 g     F .text	000000dc main
80000144 g       .text	00000000 __TEXT_END__
800021c0 g       .stack	00000000 _sstack
800011c0 g       .stack	00000000 _estack
80000150 g       .data	00000000 __DATA_BEGIN__
800011c0 g       .heap	00000000 _eheap
11100000 g       *ABS*	00000000 SYSCON
80000000 g       .text	00000000 __TEXT_BEGIN__



baremetal.elf:     file format elf32-littleriscv


Disassembly of section .text:

80000000 <__TEXT_BEGIN__>:
80000000:	00002117          	auipc	sp,0x2
80000004:	1c010113          	add	sp,sp,448 # 800021c0 <_sstack>
80000008:	ff010113          	add	sp,sp,-16
8000000c:	00112623          	sw	ra,12(sp)
80000010:	058000ef          	jal	80000068 <main>

80000014 <lprint>:

// These will not turn into function calls, but instead will find a way
// of writing the assembly in-line
static void lprint( const char * s )
{
	asm volatile( ".option norvc\ncsrrw x0, 0x138, %0\n" : : "r" (s));
80000014:	13851073          	csrw	0x138,a0
}
80000018:	00008067          	ret

8000001c <printFib.part.0>:
  	// First two terms of the series
    int prev1 = 1;
    int prev2 = 0;

    // for loop that prints n terms of fibonacci series
    for (int i = 1; i <= n; i++) {
8000001c:	00100793          	li	a5,1
    int prev2 = 0;
80000020:	00000693          	li	a3,0
    int prev1 = 1;
80000024:	00100713          	li	a4,1

      	// Print current term and update previous terms
        if (i > 2) {
80000028:	00200593          	li	a1,2
            int curr = prev1 + prev2;
            prev2 = prev1;
            prev1 = curr;
            nprint(curr);
        }
		else if (i == 1)
8000002c:	00100813          	li	a6,1
    for (int i = 1; i <= n; i++) {
80000030:	00f55463          	bge	a0,a5,80000038 <printFib.part.0+0x1c>
            nprint(prev2);
        else if (i == 2)
            nprint(prev1);
    }
}
80000034:	00008067          	ret
        if (i > 2) {
80000038:	00f5de63          	bge	a1,a5,80000054 <printFib.part.0+0x38>
            int curr = prev1 + prev2;
8000003c:	00d70633          	add	a2,a4,a3
	asm volatile( ".option norvc\ncsrrw x0, 0x136, %0\n" : : "r" (ptr));
80000040:	13661073          	csrw	0x136,a2
            prev2 = prev1;
80000044:	00070693          	mv	a3,a4
            prev1 = curr;
80000048:	00060713          	mv	a4,a2
    for (int i = 1; i <= n; i++) {
8000004c:	00178793          	add	a5,a5,1
80000050:	fe1ff06f          	j	80000030 <printFib.part.0+0x14>
		else if (i == 1)
80000054:	01079663          	bne	a5,a6,80000060 <printFib.part.0+0x44>
	asm volatile( ".option norvc\ncsrrw x0, 0x136, %0\n" : : "r" (ptr));
80000058:	13669073          	csrw	0x136,a3
}
8000005c:	ff1ff06f          	j	8000004c <printFib.part.0+0x30>
	asm volatile( ".option norvc\ncsrrw x0, 0x136, %0\n" : : "r" (ptr));
80000060:	13671073          	csrw	0x136,a4
}
80000064:	fe9ff06f          	j	8000004c <printFib.part.0+0x30>

80000068 <main>:

int main()
{
	// lprint("\n");
	lprint("Hello world from RV32 land.\n");
80000068:	80000537          	lui	a0,0x80000
{
8000006c:	fe010113          	add	sp,sp,-32
	lprint("Hello world from RV32 land.\n");
80000070:	15050513          	add	a0,a0,336 # 80000150 <__DATA_BEGIN__>
{
80000074:	00112e23          	sw	ra,28(sp)
80000078:	00812c23          	sw	s0,24(sp)
8000007c:	00912a23          	sw	s1,20(sp)
	lprint("Hello world from RV32 land.\n");
80000080:	f95ff0ef          	jal	80000014 <lprint>
	lprint("main is at: ");
80000084:	80000537          	lui	a0,0x80000
80000088:	17050513          	add	a0,a0,368 # 80000170 <__DATA_BEGIN__+0x20>
8000008c:	f89ff0ef          	jal	80000014 <lprint>
	asm volatile( ".option norvc\ncsrrw x0, 0x137, %0\n" : : "r" (ptr));
80000090:	800007b7          	lui	a5,0x80000
80000094:	06878793          	add	a5,a5,104 # 80000068 <main>
80000098:	13779073          	csrw	0x137,a5
	pprint( (intptr_t)main );
	lprint("\n");
8000009c:	800004b7          	lui	s1,0x80000
800000a0:	18048513          	add	a0,s1,384 # 80000180 <__DATA_BEGIN__+0x30>
800000a4:	f71ff0ef          	jal	80000014 <lprint>
	// lprint("\nAssembly code: ");
	// asm_demo_func();
	lprint("printFib(100)\n");
800000a8:	80000537          	lui	a0,0x80000
800000ac:	18450513          	add	a0,a0,388 # 80000184 <__DATA_BEGIN__+0x34>
800000b0:	f65ff0ef          	jal	80000014 <lprint>
    if (n < 1) {
800000b4:	06400513          	li	a0,100
800000b8:	f65ff0ef          	jal	8000001c <printFib.part.0>
	asm volatile(".option norvc\ncsrr %0, 0xC00":"=r" (ccount));
800000bc:	c00027f3          	rdcycle	a5
	printFib(100);

	// Wait a while.
	uint32_t cyclecount_initial = get_cyc_count();
	uint32_t timer_initial = TIMERL;
800000c0:	1100c737          	lui	a4,0x1100c
800000c4:	ff872683          	lw	a3,-8(a4) # 1100bff8 <TIMERL>

	volatile int i;
	for( i = 0; i < 100; i++ )
800000c8:	00012623          	sw	zero,12(sp)
800000cc:	06300613          	li	a2,99
800000d0:	00c12783          	lw	a5,12(sp)
800000d4:	04f65e63          	bge	a2,a5,80000130 <main+0xc8>
	asm volatile(".option norvc\ncsrr %0, 0xC00":"=r" (ccount));
800000d8:	c00027f3          	rdcycle	a5
		asm volatile( "nop" );
	}

	// Gather the wall-clock time and # of cycles
	uint32_t cyclecount = get_cyc_count() - cyclecount_initial;
	uint32_t timer = TIMERL - timer_initial;
800000dc:	ff872403          	lw	s0,-8(a4)

	lprint( "Processor effective speed: ");
800000e0:	80000537          	lui	a0,0x80000
800000e4:	19450513          	add	a0,a0,404 # 80000194 <__DATA_BEGIN__+0x44>
	uint32_t timer = TIMERL - timer_initial;
800000e8:	40d40433          	sub	s0,s0,a3
	lprint( "Processor effective speed: ");
800000ec:	f29ff0ef          	jal	80000014 <lprint>
	asm volatile( ".option norvc\ncsrrw x0, 0x136, %0\n" : : "r" (ptr));
800000f0:	13641073          	csrw	0x136,s0
	nprint( timer );
	lprint( " Mcyc/s\n");
800000f4:	80000537          	lui	a0,0x80000
800000f8:	1b050513          	add	a0,a0,432 # 800001b0 <__DATA_BEGIN__+0x60>
800000fc:	f19ff0ef          	jal	80000014 <lprint>

	lprint("\n");
80000100:	18048513          	add	a0,s1,384
80000104:	f11ff0ef          	jal	80000014 <lprint>
	SYSCON = 0x5555; // Power off
}
80000108:	01c12083          	lw	ra,28(sp)
8000010c:	01812403          	lw	s0,24(sp)
	SYSCON = 0x5555; // Power off
80000110:	000057b7          	lui	a5,0x5
80000114:	55578793          	add	a5,a5,1365 # 5555 <__heap_size+0x4555>
80000118:	11100737          	lui	a4,0x11100
8000011c:	00f72023          	sw	a5,0(a4) # 11100000 <SYSCON>
}
80000120:	01412483          	lw	s1,20(sp)
80000124:	00000513          	li	a0,0
80000128:	02010113          	add	sp,sp,32
8000012c:	00008067          	ret
		asm volatile( "nop" );
80000130:	00000013          	nop
	for( i = 0; i < 100; i++ )
80000134:	00c12783          	lw	a5,12(sp)
80000138:	00178793          	add	a5,a5,1
8000013c:	00f12623          	sw	a5,12(sp)
80000140:	f91ff06f          	j	800000d0 <main+0x68>
